/ presentacion
section#title
  h2 User identification with username and password in structured P2P networks
  p
    small
      a[href="http://github.com/rfernand"] Rodrigo Fernández
      |  / 
      a[href="rfernand@csrg.inf.utfsm.cl"] rfernand@csrg.inf.utfsm.cl
  aside.notes 
    ul
      li Problema
        li Redes p2p solo identifican nodos-ip
        li Explicar redes estructuradas para ello
      li Porque el problema es importante
        li Necesario si es que uno quiere construir aplicaciones que requieran permisos a nivel de usuario
      li soluciones actuales
        li PKI
        li problemas de las mismas: alta probabilidad de falla. Riesgos ante recuperación de contraseñas
      li solución
        li building blocks
          li acuerdo bizantino
          li sistemas de reputación: sistema que asigna un valor de reputación a cada nodo según recomendaciones emitidas después de cada transacción.
          li anillos de confianza: se requiere también un sistema que permita armar sub-redes (anillos) con los nodos que posean una reputación > delta, de tal forma de generar una anillo de confianza.
          li La solución propuesta trabajara sobre este anillo de confianza. Ej: CORPS
        li protocolos
        li justificación del uso de los sistemas de confianza (comparación del sistema que no use esto)
      li conclusión: se comprueba la hipótesis gracias a los datos obtenidos
      li gráfico/tabla
      li trabajo futuro
        li sistemas de recuperación de contraseñas

/ problema
section[data-background="#FF5C33"]
  section#p2p
    h2 Redes P2P
    p Cada participante (nodo) se le asigna un node ID basado en su IP
    ul
      li Cada nodo actúa como cliente y servidor dentro de la red
      li Escalable
      li Descentralizada
      li Auto mantenida
      li y robusta
  section#structured_p2p[data-background="img/p2p-structured.png"]
    h2 Redes P2P Estructuradas
    / TODO
  section#problem
    h2 Problema
    ul
      li ¿Cómo identificar a los usuarios de una red P2P usando sólo nombre de usuario y contraseña?
      li ¿Cómo hacer el sistema lo más seguro posible?
    / TODO
    aside.notes
      ul
        li Las redes P2P sólo identifican a los nodos por su IP

/ Porque el problema es importante
section[data-background="#D5E2E8"]
  section#why
    h2 ¿Por qué identificación de usuarios?
    ul
      li Necesario si es que uno quiere construir aplicaciones que requieran permisos a nivel de usuario

/li soluciones actuales
  li PKI
  li problemas de las mismas: alta probabilidad de falla. Riesgos ante recuperación de contraseñas
section[data-background="#F1F7B0"]
  section#current_solutiosn
    h2 Soluciones actuales
    ul
      li Registro de usuarios centralizado
      li PKI sobre P2P
      li Propuesta de PeerSoN
  section#pki
    aside.notes
      ul
        li Sistemas PKI sobre red requieren de que el usuario se preocupe de la mantención y seguridad de las llaves privadas de cada usuario
    h2 PKI
    / TODO
  section#peerson
    aside.notes
      ul
        li propuesta de protocolos para identificación de usuarios
        / TODO
        /li considerando alrededor de un 30% de nodos maliciosos en el sistema...
      
    h2 Peerson
    p Propuesta de protocolos para identificación de usuarios con usuario/contraseña
    ul
      li No considera nodos maliciosos en el sistema
      li Problemas de seguridad con sus protocolos de recuperación de contraseñas


/solución
 li building blocks
   li acuerdo bizantino
   li sistemas de reputación: sistema que asigna un valor de reputación a cada nodo según recomendaciones emitidas después de cada transacción.
   li anillos de confianza: se requiere también un sistema que permita armar sub-redes (anillos) con los nodos que posean una reputación > delta, de tal forma de generar una anillo de confianza.
     li La solución propuesta trabajara sobre este anillo de confianza. Ej: CORPS
section[data-background="#B2F7B0"]
  section#building_blocks
    /h2 Solución propuesta
    h2 Building blocks
    ul
      li DHT
      li Public/Private keys
      li Acuerdo bizantino
      /li Bizantine agreement
      li Sistemas de reputación
      /li Accountability systems
      li Anillos de confianza
      li One time challenges
    aside.notes
      p Servicios son implementados haciendo uso de los nodos participantes de la red.
      p Por lo mismo, la fiabilidad de los servicios dependen de que tan correctos se comporten los nodos que son parte de ella.
      p To secure the system from Sybil attacks, we assume that the generation of the nodeIDs can be verified by any node in the network, for instance the bootstrapping node or the node with the closest nodeID.
  section#dht
    h2 DHT
    aside.notes
      ul
        li Distributed Hash Table
        li Mapea llaves dentro de los nodos de la red
        li Permite encontrar un nodo dentro de la red. No sufre de falsos negativos
        li Se puede utilizar como sistema simple de almacenamiento, almacenando archivos según su nombre
    p ejemplo (imagen)?
    ul
      li CHORD
      li Pastry
    / TODO
  section#public_private_keys
    aside.notes
      ul
        li Sólo el que posea la llave privada puede descifrar lo que la llave pública cifre, y vice-versa
        li Usado para identificar a los usuarios
    h2 Public/Private keys
    p ejemplo (imagen)?
    / TODO
  section#bizantine_agreement
    aside.notes
      ul
        li Dentro de las redes p2p las responsabilidades son compartidas dentro de un grupo de nodos
        li Para evitar problemas con nodos maliciosos, las respuestas son dadas por un conjunto de nodos que deben llegar a un acuerdo
        li El sistema falla si más de 1/3 de nodos son maliciosos
    h2 Acuerdo bizantino
    p Se le llama nodo bizantino a todo nodo que no se comporta según lo esperado (ej: con fallas, malicioso o infectado)
    p ejemplo (imagen)?
    / TODO
  section#reputation_systems
    aside.notes
      ul
        li Asignan un valor a cada nodo dentro de la red tomando en cuenta las transacciones realizadas por cada uno
        li Este valor permite determinar que tan confiable es un nodo dentro de la red
    h2 Sistemas de reputación
    / TODO
    /p Assess the past history of a peer by gathering feedback from nodes with previous interactions with this peer.
    p Sistema que asigna un valor de reputación a cada nodo según recomendaciones emitidas después de cada transacción
  section#trusted_rings
    aside.notes
      ul
        li Gracias a los sistemas de reputación, se pueden armar anillos de nodos confiables
        li Estos anillos son un subset de los nodos participantes de la red P2P
        li Disminuye la probabilidad de falla de los protocolos en la red
    h2 Anillos de confianza
    p Se requiere también un sistema que permita armar sub-redes (anillos) con los nodos que posean una reputación > delta, de tal forma de generar una anillo de confianza.
    / TODO
    p ejemplo (imagen)?
    ul
      li CORPS
  section#one_time_challenges
    aside.notes
      ul
        li aumentan el tiempo de procesamiento requerido para llevar a cabo una transacción específica
        li desincentivan ataques de fuerza bruta 
    h2 One time challenges
    / TODO
    p ejemplo?
  section
    aside.notes Explicar a grandes rasgos como funcionan todos los bloques en conjunto
    h2 Esquema del sistema
    ul
      li
        | Nodo A
      li
        | Servicio S = 
        |  Conjunto de nodos S
      li
        | Servicio Identificador del usuario = 
        |  Conjunto de nodos I
      li Cada usuario posee un par de llaves públicas y privadas
      li Se usa el anillo de nodos confiables para realizar las transacciones necesarias para los protocolos del sistema de identificación de usuario

section
  section#protocols
    h2 Protocolos
    ul
      /li Securing the nodes of a leafset
      li Account registration
      li User sign in
      li Logout
      li Password Change
      li User private key recovery
  /section#securing_nodes[data-background="img/secure_routing.png" data-background-size="600px"]
    h2 Securing the nodes of a leafset
    / TODO 
  section#sign_up
    aside.notes
      ul
        li
          | leafset = servicio relacionado
        li 
          | cifrado de salt: $Crypt(salt, SHA(password)) = E_{U^{salt}}$
        li
          | salt key = K = SHA(U^{username})+SHA(U^{password})$
        li Nodo T guarda la salt cifrada
        li Uso de replicación en el almacenamiento de archivos

      
    h2 Account registration
    ol
      li 
        | Elegir nombre de 
        b  usuario
        |  y 
        b  contraseña 
      br
      li
        b Derivar par de llaves
        |  usando un archivo
        b  salt 
        |  y la contraseña
      br
      li  
        | Obtener
        b  nodos I
        |  encargados del registro del
        b  usuario A
      br
      li 
        b Petición
        |  de registro del usuario
      br
      li
        b One time challenge
      br
      li 
        b Registro del usuario
        |  en los nodos I
      br
      li 
        b Respuesta confirmación
        | de registro
      br
      li 
        b Respaldo
        |  del archivo
        b  salt
        |  del usuario (cifrado)
      
  section#sign_up_image
    p Account registration
    img{src="img/sign_up.png"}
  /section#sign_up_image2[data-background="img/sign_up.png" data-background-size="800px"]
  /section#sign_in[data-background="img/sign_in.png" data-background-size="600px"]
  section#sign_in
    h2 User sign in
    ol
      li
        b One time challenge
        |  de parte del
        b  servicio S
        |  que quiere comprobar la identidad del
        b  nodo A
      br
      li
        | El
        b  nodo A
        |  responde el
        b  challenge
        |  cifrando la solución con la 
        b  llave privada
        | del usuario 
      br
      li
        | El servicio
        b  S consulta
        |  por el conjunto de nodos a cargo de la identificación del usuario (
        b nodos I
        | ) haciendo
        b
          |  K = SHA(username)
      br
      li 
        | El servicio
        b  S
        |  pide la
        b  llave pública
        |  del usuario a los
        b  nodos I
      br
      li 
        | El 
        b  servicio S comprueba
        |  la identidad del usuario con la llave pública recibida
      br
      li
        | El 
        b  servicio S
        |  genera y envía una 
        b  llave de sesión
        |  para el nodo en caso de pasar la identificación como usuario 
  section#sign_in_img
    p User sign in (start)
    img{src="img/sign_in.png"}
    / TODO 
  section#sign_in_2
    p User sign in (Retrieve of public key)
    img{src="img/sign_in_2.png"}
  section#sign_in_3
    p User sign in (Generation of session keys)
    img{src="img/sign_in_3.png"}

  section#logout
    h2 Logout
    ul
      li Las sesiones son mantenidas por cada servicio
      li Un nodo puede enviar una petición de cierre de sesión al servicio
      li Las llaves de sesión son dadas por un tiempo determinado
      li Finalizado el tiempo, el usuario debe solicitar una  nueva llave de sesión al servicio
  section#password_change
    h2 Password Change
    ul
      li Similar al protocolo de registro de usuario
      li Los nodos I comprueban primero la identidad de la persona antes de actualizar las credenciales del usuario
      li Finalizada el registro de las nuevas llaves del usuario, se debe guardar la nueva salt del usuario de la misma forma mencionada anteriormente
  section#user_private_key_recovery
    aside.notes
      ul
        li El protocolo usa indirección para esconder la salt del usuario
        li
          | Crypt(salt, SHA(password))
        li
          | K = SHA(username)+SHA(password)
        li El sistema de almacenamiento utiliza replicación para mantener una alta disponibilidad de los datos
        li No hay forma de recuperar las llaves del usuario si olvida su contraseña
        li Probablemente seria bueno hacer 
          | K = SHA(SHA(username)+SHA(password))
    h2 User private key recovery 
    ol
      li El nodo A busca los nodos responsables de almacenar la salt del usuario
      li 
        | Para ello hace:
        |  K = SHA(username)+SHA(password)
      li El nodo A recibe el archivo salt cifrado (esperando al menos L/2 + 1 respuestas afirmativas)
      li El nodo A descifra el archivo salt y procede a derivar la llave privada correspondiente su usuario (usando el archivo salt y su contraseña)
    ul 
      br
      li No hay forma de recuperar las llaves del usuario en caso de olvido de contraseña


section
  section#params
    aside.notes
      ul
        / TODO
        li 30% nodos maliciosos???
        li 0.5% de error de clasificación  (bibliografía) 
        li Tamaños del leafset fueron elegidos para tener un rango.. según lo mas usado en la bibliografía
        li Justificación del uso de los sistemas de confianza
    h2 Parámetros utilizados para la evaluación del sistema
    / TODO
    table
      tr
        th Parámetro
        th Descripción
        th Valor
      tr
        td &rho;
        td Probabilidad de que un nodo sea malicioso
        td 0.3
      tr
        td &epsilon;
        td CORPS classification error
        td 0.05
      tr
        td L
        td Leafset/trustset size
        td 8, 16, 32
      tr
        td N
        td Number of nodes in the DHT
        td 100000
  section#error_p
    aside.notes  se usa de caso base con acuerdo bizantino...
    h2 Probabilidad de error
    table
      tr
        th Caso
        th Sin nodos confiables
        th Con nodos confiables
      tr
        td
          | Peor caso
          math
            |  (L = 8)
        td 0.188
        td
          math
            | 0.0000664
      tr
        td
          | Mejor caso
          math
            |  (L = 32)
        td 0.016
        td
          math
            | 8.24 &times; 10
            sup
              | -14
  section#results
    h2 Resultados
    ul
      li
        | Sin nodos confiables,
        |  con p = 0.016,
        |  cada 1 millón de transacciones, 
        b  16000
        |  presentarían problemas.
      li
        | Con nodos confiables, 
        |  con p = 
        math
          |  8.24 &times; 10
          sup
            | -14

        |  cada 1 millón de transacciones, 
        b  0.00000000824
        |  presentarían problemas.

section
  section#conclusions
    aside.notes se comprueba la hipótesis gracias a los datos obtenidos (gráfico/tabla)
    h2 Conclusiones
    ul
      li No es 100% segura, pero viable.
      li
        | La probabilidad de error es del orden de 
        math
          | 10
          sup
            -14
        |  con un leafset del tamaño de
        |  l = 32
      li El sistema se mantiene escalable
      li El uso de un sistema a reputación y administración de nodos confiables disminuye considerablemente la efectividad de los ataques de nodos maliciosos en la red
      li Un sistema a reputación también reduce la efectividad de ataques de colusión
      li Los desafíos computacionales limita la cantidad de usuarios que un nodo puede llegar a registrar en el sistema
  section#future_work
    aside.notes sistemas de recuperación de contraseñas
    h2 Trabajo futuro
    ul
      li Sistemas de recuperación de contraseñas
    
/section[data-markdown]
  script[type="text/template"]
    |  ## Markdown support For those of you who like that sort of thing. Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown). 
/section[data-state="customevent"]
  h2
    | Custom Events
  p
    |  Additionally custom events can be triggered on a per slide basis by binding to the 
    code
      | data-state
    |  name. 
  pre
    code[data-trim contenteditable style="font-size: 18px; margin-top: 20px;"]
      |  Reveal.addEventListener( 'customevent', function() { console.log( '"customevent" has fired' ); } ); 
/section
  h2
    | Clever Quotes
  p
    |  These guys come in two forms, inline: 
    q[cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations"]
      |  “The nice thing about standards is that there are so many to choose from”
    |  and block: 
  blockquote[cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations"]
    |  “For years there has been a theory that millions of monkeys typing at random on millions of typewriters would reproduce the entire works of Shakespeare. The Internet has proven this theory to be untrue.” 
/section
  h2
    | Pretty Code
  pre
    code[data-trim contenteditable]
      |  function linkify( selector ) { if( supports3DTransforms ) { var nodes = document.querySelectorAll( selector ); for( var i = 0, len = nodes.length; i < len; i++ ) { var node = nodes[i]; if( !node.className ) { node.className += ' roll'; } } } } 
  p
    | Courtesy of 
    a[href="http://softwaremaniacs.org/soft/highlight/en/description/"]
      | highlight.js
    | .
/section
  section#fragments
    h2
      | Fragmented Views
    p
      | Hit the next arrow...
    p.fragment
      | ... to step through ...
    ol
      li.fragment
        code
          | any type
      li.fragment
        em
          | of view
      li.fragment
        strong
          | fragments
    aside.notes
      |  This slide has fragments which are also stepped through in the notes window. 
  section
    h2
      | Fragment Styles
    p
      | There's a few styles of fragments, like:
    p.fragment.grow
      | grow
    p.fragment.shrink
      | shrink
    p.fragment.roll-in
      | roll-in
    p.fragment.fade-out
      | fade-out
    p.fragment.highlight-red
      | highlight-red
    p.fragment.highlight-green
      | highlight-green
    p.fragment.highlight-blue
      | highlight-blue
    p.fragment.current-visible
      | current-visible
    p.fragment.highlight-current-blue
      | highlight-current-blue
/section
  h2
    | Spectacular image!
  a.image[href="http://lab.hakim.se/meny/" target="_blank"]
    img[width="320" height="299" src="http://s3.amazonaws.com/hakim-static/portfolio/images/meny.png" alt="Meny"]
section#end
  h1 ¿Preguntas?
